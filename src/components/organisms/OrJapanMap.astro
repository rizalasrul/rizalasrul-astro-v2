---
// internal
import { PREFECTURES } from '../../consts';

// Hardcoded visited prefectures
const visitedPrefectures = [
  '26', // Kyoto
  '27', // Osaka
  '28', // Hyogo
  '29', // Nara
  '23', // Aichi
  '19', // Yamanashi
  '15', // Niigata
  '14', // Kanagawa
  '13', // Tokyo
  '12', // Chiba
  '11', // Saitama
  '09', // Tochigi
  '01', // Hokkaido
];
---

<style>
  #map g[data-code] {
    cursor: pointer;
  }
  #map g[data-code] path,
  #map g[data-code] polygon {
    pointer-events: auto;
    transition: stroke 0.3s ease, stroke-width 0.3s ease;
  }

  /* Custom scrollbar styles */
  .scrollbar-thin::-webkit-scrollbar {
    height: 6px;
  }

  .scrollbar-thin::-webkit-scrollbar-track {
    background: #F3F4F6;
    border-radius: 3px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: #D1D5DB;
    border-radius: 3px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: #9CA3AF;
  }

  /* Firefox scrollbar */
  .scrollbar-thin {
    scrollbar-width: thin;
    scrollbar-color: #D1D5DB #F3F4F6;
  }
</style>

<!-- Page Header -->
<div class="text-center mb-8">
  <h1 class="text-3xl md:text-4xl font-bold text-gray-800 mb-2 mr-2 ml-2">
    Japan prefecture map
  </h1>
  <p class="text-gray-600 mr-2 ml-2">
    Explore Japan's 47 prefectures through my journey
  </p>
</div>

<div class="flex flex-col md:flex-row gap-6">
  <!-- MAP Area -->
  <div id="map" class="w-full md:w-1/2 bg-white p-4 rounded-lg shadow-sm cursor-pointer"></div>

  <!-- CONTENT Area -->
  <div id="pref-detail" class="hidden md:block md:w-1/2 bg-white p-6 rounded-lg shadow-sm overflow-y-auto max-h-[calc(100vh-200px)]">
    <p class="text-gray-500">Select a prefecture on the map to view its details.</p>
  </div>
</div>

<!-- Overlay for mobile sheet -->
<div id="sheet-overlay" class="fixed inset-0 bg-black/50 opacity-0 pointer-events-none transition-opacity duration-300 md:hidden"></div>

<!-- MOBILE BOTTOM SHEET -->
<div id="mobile-sheet" class="fixed bottom-0 left-0 right-0 bg-white shadow-2xl rounded-t-3xl transition-transform duration-300 transform translate-y-full md:hidden z-50 max-h-[85vh] flex flex-col">
  <div class="flex flex-col items-center p-4 border-b">
    <div class="w-12 h-1.5 bg-gray-300 rounded-full mb-3"></div>
    <button id="close-sheet" class="text-sm text-gray-500 hover:text-gray-700 transition-colors">
      Close
    </button>
  </div>
  <div id="mobile-sheet-content" class="px-5 py-4 overflow-y-auto flex-1 space-y-4">
    <!-- Dynamic content will load here -->
  </div>
</div>

<script define:vars={{ PREFECTURES, visitedPrefectures }}>
  async function initMap() {
    const map = '/map-full.svg';
    const container = document.querySelector('#map');
    if (!container) return;

    try {
      const response = await fetch(map);
      const svg = await response.text();
      container.innerHTML = svg;

      // Add SVG filter for glow effect
      const svgElement = container.querySelector('svg');
      const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
      defs.innerHTML = `
        <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
          <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
          <feMerge>
            <feMergeNode in="coloredBlur"/>
            <feMergeNode in="SourceGraphic"/>
          </feMerge>
        </filter>
      `;
      svgElement.insertBefore(defs, svgElement.firstChild);

      // Prefecture states and styles
      const COLORS = {
        unvisited: '#EEEEEE',    // Default SVG color
        visited: '#ADF296',      // Light Green for visited
        stroke: {
          default: '#000000',
          highlight: {
            visited: '#15803D',    // Dark green for visited prefectures
            unvisited: '#666666'   // Gray for unvisited prefectures
          }
        }
      };

      let selectedPrefecture = null;
      let shiningInterval = null;
      const prefs = container.querySelectorAll('g[data-code]');

      // Function to create shining effect
      function startShining(elements, isVisited) {
        let increasing = true;
        let width = 2;
        let glowRadius = 2;

        if (shiningInterval) clearInterval(shiningInterval);

        elements.forEach(element => {
          element.style.filter = 'url(#glow)';
        });

        shiningInterval = setInterval(() => {
          if (increasing) {
            width += 0.3;
            glowRadius += 0.2;
            if (width >= 5) increasing = false;
          } else {
            width -= 0.3;
            glowRadius -= 0.2;
            if (width <= 2) increasing = true;
          }

          // Update the filter's blur radius
          const filter = svgElement.querySelector('#glow feGaussianBlur');
          if (filter) {
            filter.setAttribute('stdDeviation', glowRadius.toString());
          }

          elements.forEach(element => {
            element.setAttribute('stroke-width', width.toString());
            // Use different highlight color based on visited status
            element.setAttribute('stroke', isVisited ? COLORS.stroke.highlight.visited : COLORS.stroke.highlight.unvisited);
            element.setAttribute('stroke-opacity', '0.8');
          });
        }, 30);
      }

      function stopShining(elements) {
        if (shiningInterval) {
          clearInterval(shiningInterval);
          shiningInterval = null;
        }
        elements.forEach(element => {
          element.style.filter = 'none';
          element.setAttribute('stroke', COLORS.stroke.default);
          element.setAttribute('stroke-width', '1');
          element.setAttribute('stroke-opacity', '1');
        });
      }

      prefs.forEach((pref) => {
        const rawCode = pref.getAttribute('data-code');
        if (!rawCode) return;

        // Convert SVG's data-code to match PREFECTURES format (pad with leading zero)
        const code = rawCode.padStart(2, '0');

        // Set initial color based on visited state
        const isVisited = visitedPrefectures.includes(code);
        const elements = pref.querySelectorAll('path, polygon');
        elements.forEach(element => {
          element.setAttribute('fill', isVisited ? COLORS.visited : COLORS.unvisited);
          element.setAttribute('stroke', COLORS.stroke.default);
          element.setAttribute('stroke-width', '1');
        });

        // Add click handler
        pref.addEventListener('click', () => {
          // Stop shining effect on previously selected prefecture
          if (selectedPrefecture) {
            stopShining(selectedPrefecture.querySelectorAll('path, polygon'));
          }

          // Start shining effect on clicked prefecture
          const elements = pref.querySelectorAll('path, polygon');
          startShining(elements, isVisited);
          selectedPrefecture = pref;

          // Get prefecture info
          const prefInfo = PREFECTURES[code];
          if (!prefInfo) {
            console.error(`Prefecture info not found for code: ${code}`);
            return;
          }

          // Update info
          const infoHtml = `
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

              <!-- Left Column -->
              <div class="space-y-4">
                <!-- Prefecture Header -->
                <div class="border-b pb-2">
                  <h2 class="text-2xl font-bold mb-1">${prefInfo.en}</h2>
                  <p class="text-base text-gray-600">${prefInfo.jp}</p>
                  <p class="text-sm text-gray-500 mt-1">${prefInfo.subtitle || ''}</p>
                </div>

                <!-- Visit Status -->
                <div class="flex items-center gap-2 p-4 rounded-lg ${visitedPrefectures.includes(code) ? 'bg-green-50' : 'bg-gray-50'}">
                  <div class="w-3 h-3 rounded-full ${visitedPrefectures.includes(code) ? 'bg-green-500' : 'bg-gray-400'}"></div>
                  <p class="text-sm ${visitedPrefectures.includes(code) ? 'text-green-700' : 'text-gray-600'}">
                    ${visitedPrefectures.includes(code)
                      ? `Last visited on ${new Date(prefInfo.lastVisit).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}`
                      : 'Not visited yet'}
                  </p>
                </div>

                <!-- Personal Experience -->
                <div class="bg-purple-50 p-4 rounded-lg">
                  <h3 class="text-base font-semibold mb-2 flex items-center gap-2">
                    ‚úèÔ∏è Personal Experience
                  </h3>
                  <p class="text-gray-700 text-sm">${prefInfo.experience || 'No personal experience shared yet.'}</p>
                </div>
              </div>

              <!-- Right Column -->
              <div class="space-y-4">
                <!-- Photo Gallery -->
                ${prefInfo.photos ? `
                  <div class="bg-white p-4 rounded-lg shadow">
                    <h3 class="text-lg font-semibold mb-3">üì∏ Photo Gallery</h3>
                    <div class="relative">
                      <div class="flex space-x-4 overflow-x-auto pb-4 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100">
                        ${prefInfo.photos.map(photo => `
                          <div class="flex-shrink-0 w-60 aspect-[4/3] rounded-lg overflow-hidden bg-gray-100">
                            <img
                              src="${photo}"
                              alt="Photo from ${prefInfo.en}"
                              class="w-full h-full object-cover hover:scale-105 transition-transform duration-300" 
                              onerror="this.src='https://placehold.co/400x300/FAFAFA/A3A3A3?text=No+Image'; this.onerror=null;"
                            />
                          </div>
                        `).join('')}
                      </div>
                    </div>
                  </div>
                ` : ''}

                <!-- Practical Tips -->
                <div class="bg-yellow-50 p-4 rounded-lg">
                  <h3 class="text-base font-semibold mb-2">üí° Practical Tips</h3>
                  <ul class="text-sm list-disc list-inside text-gray-700 space-y-1">
                    ${prefInfo.tips ? prefInfo.tips.map(tip => `<li>${tip}</li>`).join('') : '<li>No tips available yet.</li>'}
                  </ul>
                </div>
              </div>

            </div>

          `;

          if (window.innerWidth >= 768) {
            // Desktop
            const detailElement = document.getElementById('pref-detail');
            if (detailElement) {
              detailElement.classList.remove('hidden');
              detailElement.innerHTML = infoHtml;
            }
          } else {
            // Mobile: open sheet
            const sheet = document.getElementById('mobile-sheet');
            const overlay = document.getElementById('sheet-overlay');
            const contentElement = document.getElementById('mobile-sheet-content');
            if (sheet && contentElement && overlay) {
              contentElement.innerHTML = infoHtml;
              sheet.classList.remove('translate-y-full');
              overlay.classList.remove('opacity-0', 'pointer-events-none');
            }
          }
        });
      });

      // Handle window resize
      function handleResize() {
        const detailElement = document.getElementById('pref-detail');
        if (detailElement) {
          if (window.innerWidth < 768) {
            detailElement.classList.add('hidden');
          }
        }
      }

      // Add resize listener
      window.addEventListener('resize', handleResize);

      // Mobile sheet close handler
      const closeButton = document.getElementById('close-sheet');
      const mobileSheet = document.getElementById('mobile-sheet');
      const overlay = document.getElementById('sheet-overlay');

      if (closeButton && mobileSheet && overlay) {
        const closeSheet = () => {
          mobileSheet.classList.add('translate-y-full');
          overlay.classList.add('opacity-0', 'pointer-events-none');

          // Stop shining effect when closing sheet
          if (selectedPrefecture) {
            stopShining(selectedPrefecture.querySelectorAll('path, polygon'));
            selectedPrefecture = null;
          }
        };

        closeButton.addEventListener('click', closeSheet);
        overlay.addEventListener('click', closeSheet);
      }

    } catch (error) {
      console.error('Error loading map:', error);
      container.innerHTML = `
        <p class="text-red-500">Failed to load map. Please refresh the page.</p>
      `;
    }
  }

  // Handle initial load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMap);
  } else {
    initMap();
  }

  // Handle View Transitions navigation
  document.addEventListener('astro:page-load', initMap);
  document.addEventListener('astro:after-swap', initMap);
</script>
