---
// astro
import type { CollectionEntry } from 'astro:content';
import type { ImageMetadata } from 'astro';
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

// components
import MvHeader from '@/components/molecules/MvHeader.astro';
import MvFooter from '@/components/molecules/MvFooter.astro';
import AtBaseHead from '@/components/atoms/AtBaseHead.astro';
import AtFormattedDate from '@/components/atoms/AtFormattedDate.astro';

type Props = CollectionEntry<'blog'>['data'];

const {
  title = '',
  description,
  pubDate,
  updatedDate,
  heroImage = '/fran.jpg',
} = Astro.props;

const posts = (
  await getCollection('blog')
)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .slice(0, 10)
  .sort((a, b) => a.data.title.length - b.data.title.length);

const bgClasses = [
  'hover:shadow-ppinkHover',
  'hover:shadow-pgreenHover',
  'hover:shadow-pblueHover',
  'hover:shadow-pyellow',

];
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}')
if (!images[heroImage]) throw new Error(`"${heroImage}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`);

const getRandomClass = () => {
  return bgClasses[Math.floor(Math.random() * bgClasses.length)];
};

const icon = `${Math.floor(Math.random() * 5) + 1}`;
---

<html lang="en">
  <head>
    <AtBaseHead title={title} description={description} image={heroImage}/>
  </head>
  <body>
    <MvHeader />
    <main class="container mx-auto md:px-10 text-white">
      <article >
        <div class="relative mb-20" transition:animate="fade">
          <span class="bg-black bg-opacity-25 w-full h-full absolute"></span>
          <div class="absolute bottom-10 md:left-20 left-6">
            <h1 class="text-4xl md:text-8xl font-semibold text-shadow pr-6">
              <span class="font-kablamo text-ppink">{title.charAt(0)}</span>
              {title.slice(1)}
            </h1>
          </div>
          <Image
            src={images[heroImage]()}
            alt={title} class="h-96 w-full object-cover"
          />
        </div>
        <div class="text-black px-6 md:px-0">
          <div class="text-sm text-pblack flex items-center justify-between">
            <AtFormattedDate date={pubDate} />
            {
              updatedDate && (
                <div class="last-updated-on">
                  Last updated on <AtFormattedDate date={updatedDate} />
                </div>
              )
            }
            <Icon name={icon} class="text-5xl" transition:animate="fade" />
          </div>

          <hr />
          <div class="flex justify-between py-10 md:flex-row flex-col">
            <div class="prose md:w-1/2 flex flex-col gap-6">
              <slot />
            </div>
            <div class="flex flex-col gap-6" transition:animate="slide">
              <ul class="flex flex-col gap-2 pt-10 md:pt-0 items-start md:items-end">
                <p class="md:hidden font-semibold">Related:</p>
                {
                  posts.map((post) => {
                    return (
                      <li class=`text-left rounded-lg border-1 border-black shadow-card group hover:shadow-hover transition  px-2 py-2 ${getRandomClass()}` >
                        <a
                          href={`/blog/${post.id}/`}
                        >
                          <h4 >{post.data.title}</h4>
                        </a>
                      </li>
                    );
                  })
                }
              </ul>
              <hr />
            </div>
          </div>
        </div>
      </article>
    </main>
    <MvFooter />
  </body>
</html>
